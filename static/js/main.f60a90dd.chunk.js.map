{"version":3,"sources":["subscriber-form/SubscribersForm.jsx","subscriber-form/utils-hooks.jsx","App.js","reportWebVitals.js","index.js"],"names":["SubscribersForm","useState","firstName","lastName","email","tel","details","setDetails","popupMsg","setPopupMsg","showMsg","setShowMsg","isError","setIsError","emailChange","useRef","validated","setValidated","validEmail","value","delay","valid","setValid","initRun","useEffect","current","handler","setTimeout","test","clearTimeout","useDebounceEmailValidation","useLayoutEffect","handleChange","ev","persist","target","name","prevDetails","className","Form","noValidate","onSubmit","currentTarget","checkValidity","preventDefault","stopPropagation","alert","Row","Col","xs","Group","controlId","Control","type","placeholder","onChange","required","size","isInvalid","Feedback","Alert","variant","Button","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f60a90dd.chunk.js","sourcesContent":["import React, {useLayoutEffect, useRef, useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {useDebounceEmailValidation} from \"./utils-hooks\";\r\nimport {Alert, Col, Form} from \"react-bootstrap\";\r\n\r\nexport function SubscribersForm() {\r\n    const [details, setDetails] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        tel: \"\"\r\n    });\r\n\r\n    const [popupMsg, setPopupMsg] = useState(\"default\");\r\n    const [showMsg, setShowMsg] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const emailChange = useRef(false);\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const validEmail = useDebounceEmailValidation(details.email, 600);\r\n\r\n\r\n    // // general layout effect - will be happen on each component update - for DEBUG\r\n    // useLayoutEffect(() => {\r\n    //     console.log(\"details = \", details);\r\n    // });\r\n\r\n    //happening after change in the popup message\r\n    useLayoutEffect(() => {\r\n        setTimeout(() => {\r\n            //resetting the msg\r\n            setPopupMsg(\"\");\r\n            setShowMsg(\r\n                false);\r\n\r\n        }, 2000);\r\n    }, [popupMsg])\r\n\r\n\r\n\r\n    const handleChange = (ev) => {\r\n        ev.persist();\r\n        if (ev.target.name === \"email\" ) {\r\n            emailChange.current = true;\r\n\r\n        } else {\r\n            emailChange.current = false;\r\n        }\r\n        setDetails(prevDetails => ({\r\n            ...prevDetails,\r\n            [ev.target.name]: ev.target.value\r\n        }));\r\n\r\n    }\r\n\r\n    const onSubmit = (ev) => {\r\n\r\n        const form = ev.currentTarget;\r\n\r\n        //The default validation for the form\r\n        if (form.checkValidity() === false || !validEmail) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n            setValidated(true);\r\n            return;\r\n        }\r\n\r\n        ev.preventDefault();\r\n        alert(\"Those are the details - you can send it from here to the server !!! :)  \\n\\n\" +\r\n            \"name = \" + details.firstName + \" \" + details.lastName\r\n            + \"\\nemail = \" + details.email\r\n            + \"\\nphone = \" + details.tel);\r\n\r\n        //we set validation to false, because by default you don't want to show validation\r\n        setValidated(false);\r\n\r\n        setPopupMsg(\"Your details have been successfully saved\");\r\n        setIsError(false);\r\n        setDetails({\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            tel: \"\"\r\n        });\r\n\r\n        setShowMsg(true);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"subscribers-input\">\r\n            <h3>Subscribers - Form</h3>\r\n            <Form className=\"needs-validation\" noValidate validated={validated}\r\n                  onSubmit={onSubmit}>{/*start of the form block */}\r\n                <Form.Row className=\"\">{/*start of the form row of 12/12 columns*/}\r\n\r\n                    <Col xs={12} className=\"\">\r\n                        <Form.Group controlId=\"firstName\" className=\"\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"First name\"\r\n                                value={details.firstName}\r\n                                onChange={handleChange}\r\n                                name=\"firstName\"\r\n                                required\r\n                                size=\"sm\"\r\n                                aria-label=\"first name\"\r\n\r\n                            />\r\n\r\n\r\n                        </Form.Group>\r\n\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row className=\"\">\r\n\r\n                    <Col xs={12} className=\"\">\r\n                        <Form.Group controlId=\"lastName\" className=\"\">\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Last name\"\r\n                                value={details.lastName}\r\n                                onChange={handleChange}\r\n                                name=\"lastName\"\r\n                                required\r\n                                size=\"sm\"\r\n                                aria-label=\"last name\"\r\n\r\n                            />\r\n\r\n\r\n                        </Form.Group>\r\n\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row className=\"\">\r\n\r\n                    <Col xs={12} className=\"\">\r\n                        <Form.Group controlId=\"email\" className=\"\">\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={details.email}\r\n                                onChange={handleChange}\r\n                                name=\"email\"\r\n                                required\r\n                                size=\"sm\"\r\n                                aria-label=\"email\"\r\n                                isInvalid={!validEmail}\r\n\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">Email is Invalid</Form.Control.Feedback>\r\n\r\n\r\n                        </Form.Group>\r\n\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row className=\"\">\r\n\r\n                    <Col xs={12} className=\"\">\r\n                        <Form.Group controlId=\"tel\" className=\"\">\r\n                            <Form.Control\r\n                                type=\"tel\"\r\n                                placeholder=\"Phone\"\r\n                                value={details.tel}\r\n                                onChange={handleChange}\r\n                                name=\"tel\"\r\n                                required\r\n                                size=\"sm\"\r\n                                aria-label=\"phone\"\r\n\r\n                            />\r\n\r\n\r\n                        </Form.Group>\r\n\r\n                    </Col>\r\n                </Form.Row>\r\n                {showMsg &&\r\n                <Alert variant={isError ? 'danger' : 'success'}>{popupMsg}</Alert>\r\n                }\r\n                <Button type=\"submit\" size=\"sm\">Save</Button>\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useRef, useState} from 'react';\r\n\r\n//Credit - based on this solution: https://usehooks.com/useDebounce/\r\nexport function useDebounceEmailValidation(value, delay) {\r\n    // console.log(\"useDebounceEmailValidation ? \", value);\r\n    // State and setters for debounced value\r\n    const [valid, setValid] = useState(true);\r\n    const initRun = useRef(true);\r\n\r\n    useEffect(\r\n        () => {\r\n            //we don't want to do it on initial running\r\n            if(initRun.current){\r\n                initRun.current = false;\r\n            }\r\n            else{\r\n                // Update debounced value after delay\r\n                const handler = setTimeout(() => {\r\n                    // console.log(\"validating mail - \" ,value);\r\n                    setValid(validateEmail(value));\r\n                    // setDebouncedValue(value);\r\n                }, delay);\r\n                // Cancel the timeout if value changes (also on delay change or unmount)\r\n                // This is how we prevent debounced value from updating if value is changed ...\r\n                // .. within the delay period. Timeout gets cleared and restarted.\r\n                return () => {\r\n                    clearTimeout(handler);\r\n                };\r\n            }\r\n\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return valid;\r\n}\r\n\r\n\r\nexport function validateEmail(email) {\r\n    var re = /\\S+@\\S+\\.\\S+/;\r\n    return re.test(email) || email===\"\";//the 2nd condition is for the form reset and we don't want to validate empty email slot.\r\n}","import './App.css';\r\nimport {SubscribersForm} from \"./subscriber-form/SubscribersForm\";\r\n\r\n/**\r\n * For deploy the app, run on the npm run deploy\r\n */\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <br/>\r\n            <SubscribersForm/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <p>\r\n                Here is a form which make validation on all fields (if they are exist), and also do validation if the\r\n                email is valid.<br/>\r\n                The email validation happens by delay (for not check in every type) by using a custom hook.\r\n            </p>\r\n            <p><a href = \"https://github.com/lingar-poc/react-basic-subscribers-form\" target= \"_blank\">Github Repository</a></p>\r\n            <hr/>\r\n\r\n            <div className= \"bottom-area\">\r\n                <h4>\r\n                    Done by lingar (Izhar Mashkif), YIM - Programming\r\n\r\n                </h4>\r\n                <h5>\r\n                    Creating large web systems from the scratch.\r\n                    <br/>\r\n                    Java, React, Angular, DB’s, Deployment, Clouds and more.\r\n                    <br/>\r\n                    Per Hour/ Per Project.\r\n                    <br/>\r\n                    Available worldwide for remote work, and for on-site work in Israel in the central and Jerusalem areas\r\n\r\n\r\n                </h5>\r\n                <h1> “DO IT SIMPLE”.\r\n                </h1>\r\n                <a href = \"https://www.linkedin.com/in/izhar-mashkif-86a01913a/\">LinkedIn </a><br/>\r\n                <a href = \"mailto:yimprogramming@gmail.com\"> yimprogramming@gmail.com</a>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}